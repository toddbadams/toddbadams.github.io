#pragma once
#include "list.h"

namespace tbaADT {
	template<class T>
	class Queue 
	{
	public:
		// Constructor
		Queue(int);
		~Queue(void);

		// Read Only Properties
		int GetCapacity();
		int GetCount();

		// Methods
		void Clear();
		T Dequeue();
		void Enqueue(T& element);
		T Peek();
		T* ToArray();
		void TrimExcess();

	protected:
		List<T>* list;
	};

	// Constructor
	template<class T>
	tbaADT::Queue<T>::Queue(int Capacity)
	{ 
		list = new List<T>(Capacity);
	}

	// Destructor
	template<class T>
	tbaADT::Queue<T>::~Queue()
	{ 
		delete [] list;
	}


	// Empty the list
	template<class T>
	void tbaADT::Queue<T>::Clear()
	{
		list->Clear();
	}

		
	// Ready Only capacity attribute
	template<class T>
	int tbaADT::Queue<T>::GetCapacity()
	{
		return list->GetCapacity();
	}

	// Ready Only count attribute
	template<class T>
	int tbaADT::Queue<T>::GetCount()
	{
		return list->GetCount();
	}


	// Returns the value at the top of the list
	template<class T>
	T tbaADT::Queue<T>::Peek()
	{
		if (list->GetCount()>0) 
			return list->Item(0);
		else
		{
			T foo;
			return foo;
		}

	}

	// Returns the value at the top of the list and removes it from the list
	template<class T>
	T tbaADT::Queue<T>::Dequeue()
	{
		if (list->GetCount()>0) 
		{
			T value = list->Item(0);
			list->RemoveAt(0);
			return value;
		}
		else
		{
			T foo;
			return foo;
		}
	}


	// Add an element to the bottom of Queue
	template<class T>
	void tbaADT::Queue<T>::Enqueue(T& value)
	{
		list->Add(value);
	}

	// Create an array copy of this list
	template<class T>
	T* tbaADT::Queue<T>::ToArray()
	{
		return list->ToArray();
	}

	// Resize the array to the current count
	template<class T>
	void  tbaADT::Queue<T>::TrimExcess()
	{
		list->TrimExcess();
	}
}